#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define S 6
#define N 30
typedef struct Worker
{
	unsigned long long ID;
	char* name;
	unsigned long long salary;
	union year
	{
		char DateS[S];
		unsigned long DateL;
	};
}Worker;
typedef struct WorkerList {
	Worker* data;
	struct WorkerList* next;
}WorkerList;

Worker* CreateWorker(int* choice)
{
	Worker* worker1 = (Worker*)malloc(1 * sizeof(Worker));
	printf("please enter your ID : ");
	scanf("%llu", &worker1->ID);
	printf("please enter your name : ");
	char str[N];
	scanf("%s", str);
	worker1->name = (char*)malloc(strlen(str) + 1);
	strcpy(worker1->name, str);
	printf("please enter your salary : ");
	scanf("%lld", &worker1->salary);
	printf("please enter the year you started work :");
	printf("would you like to enter the year in hebrew year or foreign year \n for hebrew year enter 1 for foreign year enter 0 : ");
	scanf("%d", choice);
	while (*choice != 1 && *choice != 0)
	{
		printf("Unknown number \n enter a new number : ");
		scanf("%d", choice);
	}
	if (*choice == 1)
		scanf("%s", worker1->DateS);
	else
		scanf("%lu", &worker1->DateL);

	return worker1;
}
void PrintWorker(Worker* w, int s) {
	printf("the ID is: %llu \n ", w->ID);
	printf("The name : %s \n", w->name);
	printf("The salary : %llu \n", w->salary);
	if (s == 0)
		printf("The year  :%lu\n", w->DateL);
	else
		printf("The year : %s\n", w->DateS);
}
WorkerList* newnode(Worker* data) {
	WorkerList* newNode = (WorkerList*)malloc(sizeof(WorkerList));
	newNode->data = data;
	newNode->next = NULL;
	return newNode;
}
//Assuming that the list is sorted from the lowest salay to the highest salary.
WorkerList* addWorker(WorkerList* head, Worker* w) {
	WorkerList* newN = newnode(w);
	if (head == NULL || head->data->salary >= w->salary) {
		newN->next = head;
		head = newN;
	}
	else {
		WorkerList* temp = head;
		while (temp->next != NULL && temp->next->data < newN->data->salary) {
			temp = temp->next;
		}
		newN->next = temp->next;
		temp->next = newN;
	}
	return head;
}
int index(WorkerList* head, unsigned long id) {
	int ind = 1;
	if (head == NULL)
		return -1;
	else if (head != NULL && head->next == NULL)
		return 1;
	else {
		int flag = 0;
		WorkerList* temp = head;
		while (temp != NULL) {
			if (temp->data->ID == id)
				return ind;
			else {
				temp = temp->next;
				ind++;
			}
		}
		return -1; //the list finished and we have not found an worker his id matches with the argument id
	}
}
//recursively
int indexR(WorkerList* head, unsigned long id) {
	if (head == NULL)
		return -1;
	if (head->data->ID == id)
		return 1;
	int idx = indexR(head->next, id);
	return idx < 0 ? -1 : idx + 1;
}
WorkerList* deleteWorstWorker(WorkerList* head) {
	//beacuse the list is sorted from the lowest salay to the highest,always the worst worker will be the first one(lowest salary)
	if (head != NULL && head->next == NULL) { //one node
		free(head->data->name);
		free(head->data);
		free(head);
		head = NULL;
	}
	else if (head == NULL)
		head = NULL;
	else {
		WorkerList* temp = head->next;
		free(head->data->name);
		free(head->data);
		free(head);
		head = temp;
	}
	return head;
}

void update_worker(WorkerList* head, float percent) {
	if (head != NULL) {
		WorkerList* temp = head;
		while (temp != NULL) {
			temp->data->salary += temp->data->salary * percent;
			temp = temp->next;
		}
	}
	else
		return;
}
WorkerList* reverse(WorkerList* head) {
	if (head == NULL || head->next == NULL)
		return head;
	WorkerList* temp = reverse(head->next);
	head->next->next = head;
	head->next = NULL;
	return temp;
}
void freeWorkers(WorkerList* head) {
	if (head != NULL) {
		WorkerList* temp = head;
		while (head != NULL) {
			temp = head;
			head = head->next;
			free(temp->data->name);
			free(temp->data);
			free(temp);
		}
	}
	else
		return;
}
void main() {
	int choice = 0;
	Worker* w1 = CreateWorker(&choice);
	Worker* w2 = CreateWorker(&choice);
	Worker* w3 = CreateWorker(&choice);
	//PrintWorker(w1, choice);
	WorkerList* list = NULL;
	list = addWorker(list, w1);
	list = addWorker(list, w2);
	list = addWorker(list, w3);
	list = reverse(list);
	int i = index(list, w2->ID);
	int j = indexR(list, w2->ID);
	update_worker(list, 0.10);
	freeWorkers(list);
}
